<?php// $Id$/*** @file * Provide a simulated beep.*/function beep_beep() {  watchdog('beep', 'Beep!');}function beep_action_info() {  $info['beep_beep_action'] = array(    'type' => 'system',    'description' => t('Beep annoyingly'),    'configurable' => FALSE,    'hooks' => array(      'nodeapi' => array('delete'),      'taxonomy' => array('insert', 'update', 'delete'),), );$info['beep_multiple_beep_action'] = array(    'type' => 'system',    'description' => t('Beep multiple times'),    'configurable' => TRUE,    'hooks' => array(      'any' => TRUE,), );  return $info;}/** * Simulate a beep. A Drupal action. */function beep_beep_action() {  beep_beep();}/** * Form for configurable Drupal action to beep multiple times. */function beep_multiple_beep_action_form($context) {  $form['beeps'] = array(    '#type' => 'textfield',    '#title' => t('Number of beeps'),    '#description' => t('Enter the number of times to beep when this action       executes.'),    '#default_value' => isset($context['beeps']) ? $context['beeps'] : '1',    '#required' => TRUE,);  return $form;}function beep_multiple_beep_action_validate($form, $form_state) {  $beeps = $form_state['values']['beeps'];  if (!is_numeric($beeps)) {    form_set_error('beeps', t('Please enter a numeric value.'));  }  else if ((int) $beeps > 10) {    form_set_error('beeps', t('That would be too annoying. Please choose fewer      than 10 beeps.'));  }}function beep_multiple_beep_action_submit($form, $form_state) {  return array(    'beeps' => (int) $form_state['values']['beeps']  );}    /**     * Implementation of hook_drupal_alter(). Called by Drupal after     * hook_action_info() so modules may modify the action_info array.     *     * @param array $info     *   The result of calling hook_action_info() on all modules.     */    function beep_action_info_alter(&$info) {        // Make the "Block current user" action available to the        // comment insert trigger. If other modules have modified the        // array already, we don't stomp on their changes; we just make sure        // the 'insert' operation is present. Otherwise, we assign the        // 'insert' operation.        if (isset($info['user_block_user_action']['hooks']['comment'])) {            array_merge($info['user_block_user_action']['hooks']['comment'],                        array('insert'));    }    else {        $info['user_block_user_action']['hooks']['comment'] = array('insert');    } }